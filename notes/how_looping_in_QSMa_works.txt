The extra custom MIDI command 0xFF2E01XX (ignoring the delta time that preceeds it) used by Crystal Dynamics means "Here's the beginning of a looping region of notes/events".

The 0xFF2E01XX command is a beginning loop marker and, once reached, it gets read only once by the game audio engine. 

0xFF2F00 is used as the end loop marker.
The entire section between the two markers (with 0xFF2E01XX excluded and 0xFF2F00 included) will be read XX times.
If XX = 00 then that means "Loop this region infinitely many times/forever."

The XX = 00 case is present when an entire track is looped forever as is.
Whereas the XX > 00 case can appear multiple times in a track where multiple regions get looped different amounts of times.

0xFF2E01XX
[...]          ╗  
notes,events...╠═══Read this XX times
[...]          ║
0xFF2F00       ╝

Note: loop nesting may occur.
So for example, if you have a case like this:

0xFF2E0103
[...]     
0xFF2E0105
[...]     
0xFF2F00  
[...]     
0xFF2F00  

The inner region will be read 5 x 3 = 15 times.

I have found no case of nesting that goes deeper than two levels.
What I've always found was this:

0xFF2E0100 <-- Always at the beginning of the entire track, meaning it just serves the purpose of looping the entire track forever. There may be some commands before it.
[...]     
0xFF2E01XX <-- Always a number bigger than 0. There often are multiple instances of looped regions.
[...]     
0xFF2F00  
[...]     
0xFF2F00  

0xFF2F00 in standard MIDI is treated as a global track terminator or 'end-of-file'.
In SR1, SR2 and other Crystal Dynamics games with their specific implementation of QSMa tracks, 0xFF2F00 is treated as a local terminator, so it does not necessarily end the entire file, but rather a region of notes/events.
0xFF4400 is used as the global track terminator instead as it's always located at the end of each track.

Every other command is standard MIDI and doesn't need any alteration/manipulation.