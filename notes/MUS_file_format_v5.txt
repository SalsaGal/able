HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

MUS HEADER-----------------------------------------------------
RIFF header {
4 bytes: mus header identifier ("Mus!") [CHAR STRING];
4 bytes: header size [INT];
}
4 bytes: version number [INT];
4 bytes: reverb volume [INT];
4 bytes: reverb type [INT];
4 bytes: reverb multiply [INT];
4 bytes: number of sequences [INT];
4 bytes: number of labels [INT];
4 bytes: offset that points to label offsets table [INT];
4 bytes: number of samples [INT];
4 bytes: number of instruments [INT];
4 bytes: number of presets [INT];

Total length = 48 bytes
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

COLLECTION OF OFFSETS THAT POINT TO SEQUENCES------------------
4 bytes: sequence number [INT];
4 bytes: offset [INT];

Total length = 8 bytes
Repeat N times
N is the number of sequences specified in the MUS header
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

COLLECTION OF OFFSETS THAT POINT TO INSTRUMENTS, INSTRUMENT ZONES/TONES, PRESETS AND PRESET ZONES
4 bytes: offset [INT];

Total length = 4 bytes
Repeat N times
N is (number of instruments + number of presets)
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

SAMPLE ENTRY STRUCTURE-----------------------------------------
20 bytes: sample name. terminates with the first non-printable ASCII character [CHAR STRING];
4 bytes: beginning offset of sample/wave in the SAM file [INT];
4 bytes: start loop point (this number refers to 16-bit PCM samples after the ADPCM stream has been decoded) [INT];
4 bytes: length of sample/wave in the SAM file (needs to be multiplied by 2) [INT];
4 bytes: end loop point (same encoding as the start loop pint. If both start and end loop points are set to 0, the sample/wave does not loop) [INT];
4 bytes: original/reference samplerate [INT];
4 bytes: original pitch (to be determined) (it's usually either 0x003C0000 or 0x00600000) [INT]; (IT'S THE ROOT KEY!!!)
4 bytes: "loop info" (to be determined) [INT];
4 bytes: "sndHandle" [VOID INT];

Total length = 52 bytes
Repeat N times
N is the number of samples specified in the MUS header
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

INSTRUMENT ENTRY STRUCTURE-------------------------------------
20 bytes: instrument name. terminates with the first non-printable ASCII character [CHAR STRING];
4 bytes: number of instrument zones/tones [INT];

INSTRUMENT ZONE/TONE STRUCTURE---------------------------------
4 bytes: finetune in cents (may need to be divided by two) [INT];
4 bytes: reverb [INT];
4 bytes: panning [FLOAT];
4 bytes: keynumHold [INT];
4 bytes: keynumDecay [INT];

24 bytes: volume envelope structure [STRUCT ENVELOPE] {
4 bytes: delay in seconds [FLOAT];
4 bytes: attack in seconds [FLOAT];
4 bytes: hold in seconds [FLOAT];
4 bytes: decay in seconds [FLOAT];
4 bytes: sustain in seconds [FLOAT];
4 bytes: release in seconds [FLOAT];
}

4 bytes: volume envelope attenuation [FLOAT];
4 bytes: vibrato delay [FLOAT];
4 bytes: vibrato frequency [FLOAT];
4 bytes: vibrato to pitch [FLOAT];
4 bytes: root key (it's always set to 0xFFFFFF) [INT];
1 byte: key range lower limit [CHAR, single byte number];
1 byte: key range upper limit [CHAR, single byte number];
1 byte: velocity range lower limit [CHAR, single byte number];
1 byte: velocity range upper limit [CHAR, single byte number];
4 bytes: sample index [INT];
4 bytes: base priority [FLOAT];

24 bytes: modulation envelope structure [STRUCT ENVELOPE] {
4 bytes: delay in seconds [FLOAT];
4 bytes: attack in seconds [FLOAT];
4 bytes: hold in seconds [FLOAT];
4 bytes: decay in seconds [FLOAT];
4 bytes: sustain in seconds [FLOAT];
4 bytes: release in seconds [FLOAT];
}

4 bytes: modulation envelope to pitch [FLOAT];

Total length = 104 bytes
Repeat N times
N is the number of tones/zones specified in the instrument entry header
---------------------------------------------------------------

Total length = 24 + (number of zones * zone size)
Repeat N times
N is the number of instruments specified in the MUS header
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

PRESET ENTRY STRUCTURE-----------------------------------------
20 bytes: preset name. terminates with the first non-printable ASCII character [CHAR STRING];
4 bytes: MIDI bank number [INT];
4 bytes: MIDI preset number [INT];
4 bytes: number of preset zones [INT];

PRESET ZONE STRUCTURE------------------------------------------
4 bytes: root key (it's always set to 0xFFFFFF) [INT];
1 byte: key range lower limit [CHAR, single byte number];
1 byte: key range upper limit [CHAR, single byte number];
1 byte: velocity range lower limit [CHAR, single byte number];
1 byte: velocity range upper limit [CHAR, single byte number];
4 bytes: instrument index [INT];

Total length = 12 bytes
Repeat N times
N is the number of zones specified in the preset entry header
---------------------------------------------------------------

Total length = 32 bytes + (number of zones * zone size)
Repeat N times
N is the number of presets specified in the MUS header
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

SEQUENCE ENTRY STRUCTURE---------------------------------------
4 bytes: sequence identifier [CHAR STRING];
4 bytes: quarter note time [UNSIGNED INT];
2 bytes: pulses per quarter note (PPQN) [SHORT];
2 bytes: version number [SHORT];
2 bytes: number of tracks [SHORT];
2 bytes: unused [SHORT];

COLLECTION OF OFFSETS THAT POINT TO TRACKS---------------------
4 bytes: offset [INT];

Note: the offset numbers are relative to the beginning of the QSMa sequence chunk.

Total length = 4 bytes
Repeat N times
N is the number of tracks specified in the MSQ (or QSMa) header
---------------------------------------------------------------

Since the body size of a MSQ or QSMa can vary depending on its contents,
the size of the QSMa can be worked out by using three strategies:
-use the sequences offset table right after the MUS header;
-if it's the last QSMa, check if the label offset table is reached
(alternatively you could use the track terminator 0xFF4400 as a reference,
but that would cut off all the padding that comes after it and things may
no longer align properly);

Each track body contains standard MIDI commands alongside a couple of custom commands
used by the engine for things like looping and identification of the true track body end
(which is 0xFF4400).
Don't confuse 0xFF4400 with 0xFF2F00.
In this particular case a MIDI track can have multiple standard terminators (0xFF2F00)
thus slighltly breaking the MIDI standard where a track expects only one 0xFF2F00
instance at the very end.

0xFF2E01XX is the "loop this region XX times" function. The terminator of the looping region
that is used is the standard 0xFF2F00.
0xFF2F00 is used as a local terminator, but the true global track terminator is always 0xFF4400.

Examples:
0xFF2E0103 = loop the following region 3 times
...commands to repeat 3 times...
0xFF2F00

0xFF2E0100 = loop the following region 0 times (0 means infinity in this case, or loop forever)
...commands to repeat forever...
0xFF2F00
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

COLLECTION OF OFFSETS THAT POINT TO "LABELS"-------------------
4 bytes: label offset [INT];

Total length = 4 bytes
Repeat N times
N is the number of labels specified in the MUS header
---------------------------------------------------------------

HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH